<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- 若需要调试, 可将debug 标签注释取消 -->
    <!--<debug/> -->

    <!-- 静态资源, 忽略 -->
    <!--static url pattern -->
    <http pattern="/resources/**" security="none"/>
    <http pattern="/login.jsp" security="none"/>
    <http pattern="/index.jsp" security="none"/>
    <http pattern="/test9.html" security="none"/>
    <http pattern="/oauth/rest_token" security="none"/>



    <!-- Spring MVC的注解配置, 注意: 该配置不能放置在 mkk-servlet.xml 文件中 -->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>
    <!--启用安全注解-->
    <!--<global-method-security secured-annotations="enabled"/>-->
    <global-method-security pre-post-annotations="enabled"    proxy-target-class="true"/>



    <!--================================================-->
    <!-- /oauth/token 是oauth2登陆验证请求的url 用于获取access_token ,默认的生存时间是43200秒，即12小时 -->
    <http pattern="/oauth/token" create-session="always"
          authentication-manager-ref="oauth2AuthenticationManager" use-expressions="false">
        <csrf disabled="true"/>
        <intercept-url pattern="/oauth/token"
                       access="IS_AUTHENTICATED_FULLY"/>     <!-- 可以访问的角色名称，如果需要拦截，需要实现UserDetails接口，实现getAuthorities（）方法 -->
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <http pattern="/m/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">
        <anonymous enabled="false"/>

        <intercept-url pattern="/m/**" access="ROLE_USER,SCOPE_READ"/>

        <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>
    <http pattern="/api/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">
        <anonymous enabled="false"/>

        <intercept-url pattern="/api/**" access="ROLE_DEVELOPER,SCOPE_READ"/>

        <custom-filter ref="developerResourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <http auto-config="true" disable-url-rewriting="true" create-session="ifRequired"
          authentication-manager-ref="authenticationManager" >
        <csrf disabled="true"/>
        <!--<intercept-url pattern="/oauth/**" access="hasRole('ROLE_USER')"/>-->
        <intercept-url pattern="/login" access="isAnonymous"/>

        <form-login login-page="/login.jsp" login-processing-url="/login"
                    username-parameter="username" password-parameter="password"
                    authentication-success-handler-ref="auth-pass"
                    authentication-failure-handler-ref="auth-fail"/>
        <logout logout-success-url="/index.jsp" logout-url="/logout.do"/>
        <anonymous/>
    </http>

    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>
    <beans:bean id="oauth2ClientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <!--
     指定spring要保护的资源，如果没有这个，访问控制的时候会说没有Authentication object：
        每一个资源(resource)的定义, resource-id必须唯一, OauthClientDetails中的resourceIds属性的值由此来的,
        允许一个Client有多个resource-id, 由逗号(,)分隔
        每一个定义会在Security Flow中添加一个位于 PRE_AUTH_FILTER 之前的Filter
    -->
    <oauth2:resource-server id="mobileResourceServer"
                            resource-id="mobile-resource" token-services-ref="tokenServices"/>
    <oauth2:resource-server id="developerResourceServer"
                            resource-id="api-resource" token-services-ref="tokenServices"/>
    <!--oauth2 的server所能支持的请求类型 -->
    <oauth2:authorization-server
            client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
            user-approval-handler-ref="oauthUserApprovalHandler">
        <oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices"/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>
    <!--
        管理 Authorization code
    -->
    <beans:bean id="jdbcAuthorizationCodeServices"
                class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <beans:constructor-arg index="0" ref="dataSource"/>
    </beans:bean>
    <!--<oauth2:client-details-service id="clientDetailsService">-->
    <!--<oauth2:client client-id="mobile_1"-->
    <!--authorized-grant-types="password,authorization_code,refresh_token,implicit"-->
    <!--secret="secret_1" authorities="ROLE_USER" scope="read,write,trust"/>-->
    <!--</oauth2:client-details-service>-->
    <beans:bean id="clientDetailsService" class="com.cat.justdoit.domain.oauth.CustomJdbcClientDetailsService">
        <beans:constructor-arg index="0" ref="dataSource"/>

    </beans:bean>

    <beans:bean id="tokenStore"
                class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="dataSource"/>
    </beans:bean>
    <!--<beans:bean id="tokenStore"-->
    <!--class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>-->

    <beans:bean id="tokenServices"
                class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="supportRefreshToken" value="true"/>
    </beans:bean>


    <!--处理访问成功 -->
    <beans:bean id="oauth2AuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
    <!--处理访问拒绝 -->
    <beans:bean id="oauth2AccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    <!--处理认证点 -->
    <!--<beans:bean id="oauthUserApprovalHandler"-->
                <!--class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler"/>-->
    <!--认证点的另一种处理方式-->
    <beans:bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory"
                id="oAuth2RequestFactory">
        <beans:constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean>
    <beans:bean id="oauthUserApprovalHandler"
                class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
    </beans:bean>
    <!--处理访问控制 -->
    <beans:bean id="oauth2AccessDecisionManager"
                class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean
                        class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean
                        class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>


    <!--================================================-->


    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="authenticationProvider"/>
    </authentication-manager>
    <beans:bean id="auth-pass"
                class="com.cat.justdoit.web.oauth.AuthSuccessHandler"></beans:bean>
    <beans:bean id="auth-fail"
                class="com.cat.justdoit.web.oauth.AuthFailureHandler"></beans:bean>

    <beans:bean id="authenticationProvider"
                class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="hideUserNotFoundExceptions"
                        value="false"/>
        <beans:property name="userDetailsService" ref="userService"/>
        <beans:property name="passwordEncoder" ref="passwordEncode"/>
        <!--<beans:property name="saltSource" ref="saltSource"/>-->
    </beans:bean>
    <!-- 配置密码加密类 -->
    <beans:bean id="passwordEncode"
                class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
    <beans:bean id="saltSource"
                class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <beans:property name="userPropertyToUse" value="username"/>
    </beans:bean>
</beans:beans>